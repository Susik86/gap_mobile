{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 1}, "tests": {"0": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   NoSuchElementError: An element could not be located on the page using the given search parameters.\n       at XCUITestDriver.doNativeFind (/Users/susannakarapetyan/.appium/node_modules/appium-xcuitest-driver/lib/commands/find.js:143:13)\n       at processTicksAndRejections (node:internal/process/task_queues:105:5)\n       at XCUITestDriver.findNativeElementOrElements (/Users/susannakarapetyan/.appium/node_modules/appium-xcuitest-driver/lib/commands/find.js:97:12)\n       at XCUITestDriver.findElOrEls (/Users/susannakarapetyan/.appium/node_modules/appium-xcuitest-driver/lib/commands/find.js:24:14)\n       at XCUITestDriver.findElOrElsWithProcessing (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:60:12)\n       at XCUITestDriver.findElement (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:75:12)\n       AssertionError: \u274c Pop-up was not found or did not contain the expected text\n", "test_name": "test_invalid_login_pop_up", "rerun": "0"}, "1": {"status": "ERROR", "message": "self = <mobile_automation_framework.tests.test_login.TestLogin object at 0x7fe4a071a1f0>\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"2d1b6bee-82bd-4b7e-8840-8f7085b99f20\")>\n\n    @pytest.fixture(autouse=True)\n    def setup(self, driver):\n        \"\"\"Setup before each test runs.\"\"\"\n        self.logger = logger  # \u2705 Use centralized logger\n        self.logger.info(\"\ud83d\udd39 Setting up Login Test\")\n    \n        self.driver = driver\n        app_package = self.driver.capabilities.get(\"appPackage\")\n    \n        if app_package:\n            self.logger.info(\"\ud83d\udd04 Restarting App for a fresh session...\")\n            self.driver.terminate_app(app_package)\n            self.driver.activate_app(app_package)\n    \n        self.platform = self.driver.capabilities.get(\"platformName\", \"Unknown\")\n        self.logger.info(f\"\ud83d\udd0d Running on platform: {self.platform}\")\n    \n        self.login_page = LoginPage(self.driver, self.platform)\n        self.dashboard_page = DashboardPage(self.driver, self.platform)\n        self.strings = StringsEn().LoginPage\n>       self.login_page.open_app()\n\ntests/test_login.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/login_page.py:30: in open_app\n    self.wait_for_element(login_button_locator)\npages/base_page.py:39: in wait_for_element\n    return WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2d1b6bee-82bd-4b7e-8840-8f7085b99f20\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7fe4a094d550>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException\n", "test_name": "test_valid_login", "rerun": "0"}}, "suite_name": "tests/test_login.py"}}}, "date": "March 01, 2025", "start_time": 1740845894.2246048, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "1", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "2"}