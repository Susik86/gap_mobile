{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "self = <mobile_automation_framework.tests.Genius_Meter.create_genius_team_UI_tests.TestGMCreateTeam object at 0x7fc1cbf3e9a0>\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"9a48929b-7c87-4aff-9104-fe7ad7fd7252\")>\n\n    @pytest.fixture(autouse=True)\n    def setup(self, driver):\n        \"\"\"Setup before each test runs.\"\"\"\n        self.logger = logger\n        self.logger.info(\"\ud83d\udd39 Setting up Login Test\")\n    \n        self.driver = driver\n        app_package = self.driver.capabilities.get(\"appPackage\")\n    \n        if app_package:\n            self.logger.info(\"\ud83d\udd04 Restarting App for a fresh session...\")\n            self.driver.terminate_app(app_package)\n            self.driver.activate_app(app_package)\n    \n        self.platform = self.driver.capabilities.get(\"platformName\", \"Unknown\")\n        self.logger.info(f\"\ud83d\udd0d Running on platform: {self.platform}\")\n    \n        # Initialize page objects separately per test\n        self.login_page = LoginPage(self.driver, self.platform)\n        self.dashboard_page = DashboardPage(self.driver, self.platform)\n        self.gm_page = GMPage(self.driver, self.platform)\n        self.create_GM_screen = GMCreateTeamPage(self.driver, self.platform)\n        self.strings = StringsEn().LoginPage\n        self.login_page.open_app()\n        self.logger.info(f\"\ud83d\udd39 Running valid login test on: {self.platform}\")\n        user = Users.get_random_valid_user()\n        email = user[\"email\"]\n        password = user[\"password\"]\n        self.logger.info(f\"\ud83d\udd10 Logging in with: {email} / {password}\")\n        self.login_page.login(email, password)\n>       self.dashboard_page.assert_dashboard_tab_is_visible()\n\ntests/Genius_Meter/create_genius_team_UI_tests.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.dashboard_page.DashboardPage object at 0x7fc1cc071340>\n\n    def assert_dashboard_tab_is_visible(self):\n        \"\"\"Asserts that the Dashboard tab is visible after login.\"\"\"\n        try:\n            dashboard_tab = self.locators.get(\"dashboard_tab_btn\")\n            self.wait_for_element(dashboard_tab, timeout=10)\n            print(\"Trying to locate:\", dashboard_tab)  # Debugging print\n            if not dashboard_tab:\n                self.logger.error(\"\u274c 'dashboard_tab_btn' locator is missing.\")\n                raise ValueError(\"\u274c 'dashboard_tab_btn' locator is missing.\")\n    \n            element = self.driver.find_element(*dashboard_tab)\n>           assert element.is_displayed(), \"\u274c Dashboard tab is not visible!\"\nE           AssertionError: \u274c Dashboard tab is not visible!\n\npages/dashboard_page.py:32: AssertionError\n", "test_name": "test_all_elements_have_appropriate_texts", "rerun": "0"}}, "suite_name": "tests/Genius_Meter/create_genius_team_UI_tests.py"}}}, "date": "March 20, 2025", "start_time": 1742487313.827688, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}