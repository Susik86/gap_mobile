{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "self = <mobile_automation_framework.tests.Genius_Meter.create_GM_team.multi_device_tests.TestCreateGMTeamSuccessfully object at 0x7fba8afeec70>\nmultidevice_drivers = (<appium.webdriver.webdriver.WebDriver (session=\"56d574eb-b300-4761-9f77-be2b69e411a9\")>, <appium.webdriver.webdriver.WebDriver (session=\"b8013918-703d-4ac2-a65f-a679a008efbb\")>)\n\n    @pytest.fixture(autouse=True)\n    def setup(self, multidevice_drivers):\n        \"\"\"Setup for multi-device test using iOS (User A) and Android (User B)\"\"\"\n        self.logger = logger\n        self.logger.info(\"\ud83d\udd39 Setting up Multi-Device GM Team Test\")\n    \n        # \u2705 Drivers for iOS (User A) and Android (User B)\n        self.driver_ios, self.driver_android = multidevice_drivers\n        self.platform_ios = get_platform_name(self.driver_ios)\n        self.platform_android = get_platform_name(self.driver_android)\n    \n        self.logger.info(f\"\ud83d\udcf1 iOS Device Platform: {self.platform_ios}\")\n        self.logger.info(f\"\ud83e\udd16 Android Device Platform: {self.platform_android}\")\n    \n        # \ud83d\udc64 User A - iOS login\n        user_a = Users.get_user_a()\n        self.login_page_ios = LoginPage(self.driver_ios, self.platform_ios)\n        self.dashboard_page_ios = DashboardPage(self.driver_ios, self.platform_ios)\n        self.gm_page_ios = GMPage(self.driver_ios, self.platform_ios)\n        self.create_GM_screen_ios = GMCreateTeamPage(self.driver_ios, self.platform_ios)\n        self.create_GM_Invite_Members_screen_ios = GMInviteToTeamPage(self.driver_ios, self.platform_ios)\n        self.GM_Invite_find_people_screen_ios = GMInviteFindPeoplePage(self.driver_ios, self.platform_ios)\n    \n    \n    \n        self.login_page_ios.open_app()\n        self.logger.info(f\"\ud83d\udd10 Logging in User A (iOS): {user_a['email']}\")\n        self.login_page_ios.login(user_a[\"email\"], user_a[\"password\"])\n>       self.dashboard_page_ios.assert_dashboard_tab_is_visible()\n\ntests/Genius_Meter/create_GM_team/multi_device_tests.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.dashboard_page.DashboardPage object at 0x7fba8b072a00>\n\n    def assert_dashboard_tab_is_visible(self):\n        \"\"\"Asserts that the Dashboard tab is visible after login.\"\"\"\n        try:\n            dashboard_tab = self.locators.get(\"dashboard_tab_btn\")\n            self.wait_for_element(dashboard_tab, timeout=10)\n            print(\"Trying to locate:\", dashboard_tab)  # Debugging print\n            if not dashboard_tab:\n                self.logger.error(\"\u274c 'dashboard_tab_btn' locator is missing.\")\n                raise ValueError(\"\u274c 'dashboard_tab_btn' locator is missing.\")\n    \n            element = self.driver.find_element(*dashboard_tab)\n>           assert element.is_displayed(), \"\u274c Dashboard tab is not visible!\"\nE           AssertionError: \u274c Dashboard tab is not visible!\n\npages/dashboard_page.py:32: AssertionError\n", "test_name": "test_create_GM_team_successfully", "rerun": "0"}}, "suite_name": "tests/Genius_Meter/create_GM_team/multi_device_tests.py"}}}, "date": "May 09, 2025", "start_time": 1746797488.8504379, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}