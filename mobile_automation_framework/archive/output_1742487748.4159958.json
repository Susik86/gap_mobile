{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "self = <pages.dashboard_page.DashboardPage object at 0x7f9c71872340>\n\n    def assert_dashboard_tab_is_visible(self):\n        \"\"\"Asserts that the Dashboard tab is visible after login.\"\"\"\n        try:\n            dashboard_tab = self.locators.get(\"dashboard_tab_btn\")\n>           self.wait_for_element(dashboard_tab, timeout=10)\n\npages/dashboard_page.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/base_page.py:44: in wait_for_element\n    return WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d3c6865f-98ce-4e0e-8963-27405d3633ca\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7f9c718521f0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       NoSuchElementError: An element could not be located on the page using the given search parameters.\nE           at XCUITestDriver.doNativeFind (/Users/susannakarapetyan/.appium/node_modules/appium-xcuitest-driver/lib/commands/find.js:143:13)\nE           at processTicksAndRejections (node:internal/process/task_queues:105:5)\nE           at XCUITestDriver.findNativeElementOrElements (/Users/susannakarapetyan/.appium/node_modules/appium-xcuitest-driver/lib/commands/find.js:97:12)\nE           at XCUITestDriver.findElOrEls (/Users/susannakarapetyan/.appium/node_modules/appium-xcuitest-driver/lib/commands/find.js:24:14)\nE           at XCUITestDriver.findElOrElsWithProcessing (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:60:12)\nE           at XCUITestDriver.findElement (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:75:12)\n\n../../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <mobile_automation_framework.tests.Genius_Meter.create_genius_team_UI_tests.TestGMCreateTeam object at 0x7f9c7173daf0>\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"d3c6865f-98ce-4e0e-8963-27405d3633ca\")>\n\n    @pytest.fixture(autouse=True)\n    def setup(self, driver):\n        \"\"\"Setup before each test runs.\"\"\"\n        self.logger = logger\n        self.logger.info(\"\ud83d\udd39 Setting up Login Test\")\n    \n        self.driver = driver\n        app_package = self.driver.capabilities.get(\"appPackage\")\n    \n        if app_package:\n            self.logger.info(\"\ud83d\udd04 Restarting App for a fresh session...\")\n            self.driver.terminate_app(app_package)\n            self.driver.activate_app(app_package)\n    \n        self.platform = self.driver.capabilities.get(\"platformName\", \"Unknown\")\n        self.logger.info(f\"\ud83d\udd0d Running on platform: {self.platform}\")\n    \n        # Initialize page objects separately per test\n        self.login_page = LoginPage(self.driver, self.platform)\n        self.dashboard_page = DashboardPage(self.driver, self.platform)\n        self.gm_page = GMPage(self.driver, self.platform)\n        self.create_GM_screen = GMCreateTeamPage(self.driver, self.platform)\n        self.strings = StringsEn().LoginPage\n        self.login_page.open_app()\n        self.logger.info(f\"\ud83d\udd39 Running valid login test on: {self.platform}\")\n        user = Users.get_random_valid_user()\n        email = user[\"email\"]\n        password = user[\"password\"]\n        self.logger.info(f\"\ud83d\udd10 Logging in with: {email} / {password}\")\n        self.login_page.login(email, password)\n>       self.dashboard_page.assert_dashboard_tab_is_visible()\n\ntests/Genius_Meter/create_genius_team_UI_tests.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.dashboard_page.DashboardPage object at 0x7f9c71872340>\n\n    def assert_dashboard_tab_is_visible(self):\n        \"\"\"Asserts that the Dashboard tab is visible after login.\"\"\"\n        try:\n            dashboard_tab = self.locators.get(\"dashboard_tab_btn\")\n            self.wait_for_element(dashboard_tab, timeout=10)\n            print(\"Trying to locate:\", dashboard_tab)  # Debugging print\n            if not dashboard_tab:\n                self.logger.error(\"\u274c 'dashboard_tab_btn' locator is missing.\")\n                raise ValueError(\"\u274c 'dashboard_tab_btn' locator is missing.\")\n    \n            element = self.driver.find_element(*dashboard_tab)\n            assert element.is_displayed(), \"\u274c Dashboard tab is not visible!\"\n    \n            self.logger.info(\"\u2705 Dashboard tab is visible on the Dashboard.\")\n    \n        except (TimeoutException, NoSuchElementException) as e:\n            self.logger.error(f\"\u274c Dashboard tab is NOT visible: {str(e)}\")\n    \n            # \ud83d\udcf8 Capture a screenshot\n            screenshot_path = \"logs/Dashboard_tab_not_visible.png\"\n            self.driver.save_screenshot(screenshot_path)\n            self.logger.info(f\"\ud83d\udcf8 Screenshot saved: {screenshot_path}\")\n    \n>           raise AssertionError(\"\u274c Dashboard tab was not found.\")\nE           AssertionError: \u274c Dashboard tab was not found.\n\npages/dashboard_page.py:44: AssertionError\n", "test_name": "test_all_elements_have_appropriate_texts", "rerun": "0"}}, "suite_name": "tests/Genius_Meter/create_genius_team_UI_tests.py"}}}, "date": "March 20, 2025", "start_time": 1742487691.042916, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}