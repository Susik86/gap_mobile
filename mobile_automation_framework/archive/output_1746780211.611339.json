{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "self = <mobile_automation_framework.tests.Genius_Meter.create_GM_team.multi_device_tests.TestCreateGMTeamSuccessfully object at 0x7fd7b78ed3a0>\nmultidevice_drivers = (<appium.webdriver.webdriver.WebDriver (session=\"66f0651b-2eb3-4eb9-982b-e7850f2c31dc\")>, <appium.webdriver.webdriver.WebDriver (session=\"0409230c-952e-4fc5-88c8-89713524d085\")>)\n\n    @pytest.fixture(autouse=True)\n    def setup(self, multidevice_drivers):\n        \"\"\"Setup for multi-device test using iOS (User A) and Android (User B)\"\"\"\n        self.logger = logger\n        self.logger.info(\"\ud83d\udd39 Setting up Multi-Device GM Team Test\")\n    \n        # \u2705 Drivers for iOS (User A) and Android (User B)\n        self.driver_ios, self.driver_android = multidevice_drivers\n        self.platform_ios = get_platform_name(self.driver_ios)\n        self.platform_android = get_platform_name(self.driver_android)\n    \n        self.logger.info(f\"\ud83d\udcf1 iOS Device Platform: {self.platform_ios}\")\n        self.logger.info(f\"\ud83e\udd16 Android Device Platform: {self.platform_android}\")\n    \n        # \ud83d\udc64 User A - iOS login\n        user_a = Users.get_user_a()\n        self.login_page_ios = LoginPage(self.driver_ios, self.platform_ios)\n        self.dashboard_page_ios = DashboardPage(self.driver_ios, self.platform_ios)\n        self.gm_page_ios = GMPage(self.driver_ios, self.platform_ios)\n        self.create_GM_screen_ios = GMCreateTeamPage(self.driver_ios, self.platform_ios)\n        self.create_GM_Invite_Members_screen_ios = GMInviteToTeamPage(self.driver_ios, self.platform_ios)\n>       self.GM_Invite_find_people_screen_ios = GMInviteFindPeoplePage(self.driver_ios, self.platform_ios)\n\ntests/Genius_Meter/create_GM_team/multi_device_tests.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/Genius_Meter/GM_invite_find_people_list.py:18: in __init__\n    self.locators = GMInviteFindPeopleLocators.get_locators(\"GM_PAGE\", platform)  # \u2705 Ensure platform is passed\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage_name = 'GM_PAGE', platform = 'iOS'\n\n    @staticmethod\n    def get_locators(page_name, platform):\n        locators = getattr(GMInviteFindPeopleLocators, platform.upper(), None)\n        if locators is None:\n            raise ValueError(f\"\u274c Unsupported platform: {platform}\")\n    \n        page_locators = locators.get(page_name, None)\n        if page_locators is None:\n>           raise ValueError(f\"\u274c No locators found for page: {page_name} on platform: {platform}\")\nE           ValueError: \u274c No locators found for page: GM_PAGE on platform: iOS\n\ndata/locators/Genius_Meter_locators/GM_invite_find_people_locators.py:33: ValueError\n", "test_name": "test_create_GM_team_successfully", "rerun": "0"}}, "suite_name": "tests/Genius_Meter/create_GM_team/multi_device_tests.py"}}}, "date": "May 08, 2025", "start_time": 1746722914.263896, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}